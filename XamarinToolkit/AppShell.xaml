<?xml version="1.0" encoding="UTF-8"?>
<Shell xmlns="http://xamarin.com/schemas/2014/forms" 
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:XamarinToolkit.Views"
       xmlns:localBehavior="clr-namespace:XamarinToolkit.Views.BehaviorView"
       xmlns:localConverter="clr-namespace:XamarinToolkit.Views.ConverterView"
       Title="XamarinToolkit"
       x:Class="XamarinToolkit.AppShell">

    <!--
        The overall app visual hierarchy is defined here, along with navigation.
    
        https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
    -->

    <Shell.Resources>
        <ResourceDictionary>
            <Style x:Key="BaseStyle" TargetType="Element">
                <Setter Property="Shell.BackgroundColor" Value="{StaticResource Primary}" />
                <Setter Property="Shell.ForegroundColor" Value="White"/>
                <Setter Property="Shell.TitleColor" Value="White" />
                <Setter Property="Shell.DisabledColor" Value="#B4FFFFFF" />
                <Setter Property="Shell.UnselectedColor" Value="#95FFFFFF" />
                <Setter Property="Shell.TabBarBackgroundColor" Value="{StaticResource Primary}" />
                <Setter Property="Shell.TabBarForegroundColor" Value="White"/>
                <Setter Property="Shell.TabBarUnselectedColor" Value="#95FFFFFF"/>
                <Setter Property="Shell.TabBarTitleColor" Value="White"/>
            </Style>
            <Style TargetType="TabBar" BasedOn="{StaticResource BaseStyle}" />
            <Style TargetType="FlyoutItem" BasedOn="{StaticResource BaseStyle}" />

            <!--
            Default Styles for all Flyout Items
            https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
            -->
            <Style Class="FlyoutItemLabelStyle" TargetType="Label">
                <Setter Property="TextColor" Value="White"></Setter>
            </Style>
            <Style Class="FlyoutItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{x:OnPlatform UWP=Transparent, iOS=White}" />
                                    <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Selected">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <!--
            Custom Style you can apply to any Flyout Item
            -->
            <Style Class="MenuItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Shell.Resources>

    <!-- 
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->

    <FlyoutItem Title="List To String Converter" Icon="icon_about">
        <ShellContent Route="ListToStringConverterPage" ContentTemplate="{x:DataTemplate localConverter:ListToStringConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="List Is Null Or Empty Converter" Icon="icon_about">
        <ShellContent Route="ListIsNullOrEmptyConverterPage" ContentTemplate="{x:DataTemplate localConverter:ListIsNullOrEmptyConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="List Is Not Null Or Empty Converter" Icon="icon_about">
        <ShellContent Route="ListIsNotNullOrEmptyConverterPage" ContentTemplate="{x:DataTemplate localConverter:ListIsNotNullOrEmptyConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Item Tapped Event Args Converter" Icon="icon_about">
        <ShellContent Route="ItemTappedEventArgsConverterPage" ContentTemplate="{x:DataTemplate localConverter:ItemTappedEventArgsConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Item Selected Event Args Converter" Icon="icon_about">
        <ShellContent Route="ItemSelectedEventArgsConverterPage" ContentTemplate="{x:DataTemplate localConverter:ItemSelectedEventArgsConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Is Null Or Empty Converter" Icon="icon_about">
        <ShellContent Route="IsNullOrEmptyConverterPage" ContentTemplate="{x:DataTemplate localConverter:IsNullOrEmptyConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Is In Range Converter" Icon="icon_about">
        <ShellContent Route="IsInRangeConverterPage" ContentTemplate="{x:DataTemplate localConverter:IsInRangeConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Inverted Bool Converter" Icon="icon_about">
        <ShellContent Route="InvertedBoolConverterPage" ContentTemplate="{x:DataTemplate localConverter:InvertedBoolConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Index To Array Item Converter" Icon="icon_about">
        <ShellContent Route="IndexToArrayItemConverterPage" ContentTemplate="{x:DataTemplate localConverter:IndexToArrayItemConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Equal Converter" Icon="icon_about">
        <ShellContent Route="EqualConverterPage" ContentTemplate="{x:DataTemplate localConverter:EqualConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Enum To Bool Converter" Icon="icon_about">
        <ShellContent Route="EnumToBoolConverterPage" ContentTemplate="{x:DataTemplate localConverter:EnumToBoolConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Double ToInt Converter" Icon="icon_about">
        <ShellContent Route="DoubleToIntConverterPage" ContentTemplate="{x:DataTemplate localConverter:DoubleToIntConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Date Time Offset Converter" Icon="icon_about">
        <ShellContent Route="DateTimeOffsetConverterPage" ContentTemplate="{x:DataTemplate localConverter:DateTimeOffsetConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Compare Converter" Icon="icon_about">
        <ShellContent Route="CompareConverterPage" ContentTemplate="{x:DataTemplate localConverter:CompareConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Byte Array To ImageSource Converter" Icon="icon_about">
        <ShellContent Route="ByteArrayToImageSourceConverterPage" ContentTemplate="{x:DataTemplate localConverter:ByteArrayToImageSourceConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Bool To Object Converter" Icon="icon_about">
        <ShellContent Route="BoolToObjectConverterPage" ContentTemplate="{x:DataTemplate localConverter:BoolToObjectConverterPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="User Stopped Typing Behavior" Icon="icon_feed">
        <ShellContent Route="UserStoppedTypingBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:UserStoppedTypingBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Uri Validation Behavior" Icon="icon_feed">
        <ShellContent Route="UriValidationBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:UriValidationBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Text Validation Behavior" Icon="icon_feed">
        <ShellContent Route="TextValidationBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:TextValidationBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Set Focused On Entry Completed Behavior" Icon="icon_feed">
        <ShellContent Route="SetFocusedOnEntryCompletedBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:SetFocusedOnEntryCompletedBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Required String Validation Behavior" Icon="icon_feed">
        <ShellContent Route="RequiredStringValidationBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:RequiredStringValidationBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="NumericValidationBehaviorPage" Icon="icon_feed">
        <ShellContent Route="NumericValidationBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:NumericValidationBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Multi Validation Behavior" Icon="icon_feed">
        <ShellContent Route="MultiValidationBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:MultiValidationBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Max Length Reached Behavior" Icon="icon_feed">
        <ShellContent Route="MaxLengthReachedBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:MaxLengthReachedBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Masked Behavior" Icon="icon_feed">
        <ShellContent Route="MaskedBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:MaskedBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Implied Order Grid Behavior" Icon="icon_feed">
        <ShellContent Route="ImpliedOrderGridBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:ImpliedOrderGridBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Event To Command Behavior" Icon="icon_feed">
        <ShellContent Route="EventToCommandBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:EventToCommandBehaviorPage}"/>
    </FlyoutItem>
    <FlyoutItem Title="Email Validation Behavior" Icon="icon_feed">
        <ShellContent Route="EmailValidationBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:EmailValidationBehaviorPage}"/>
    </FlyoutItem>

    <FlyoutItem Title="Characters Validation Behavior" Icon="icon_feed">
        <ShellContent Route="CharactersValidationBehaviorPage" ContentTemplate="{x:DataTemplate localBehavior:CharactersValidationBehaviorPage}"/>
    </FlyoutItem>
    <FlyoutItem Title="Animation Behavior" Icon="icon_feed">
        <ShellContent Route="AnimationBehaviorPage" ContentTemplate="{DataTemplate localBehavior:AnimationBehaviorPage}" />
    </FlyoutItem>
    <!--<FlyoutItem Title="About" Icon="icon_about.png">
        <ShellContent Route="AboutPage" ContentTemplate="{DataTemplate local:AboutPage}" />
    </FlyoutItem>
    <FlyoutItem Title="Browse" Icon="icon_feed.png">
        <ShellContent Route="ItemsPage" ContentTemplate="{DataTemplate local:ItemsPage}" />
    </FlyoutItem>-->

    <!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->
    <MenuItem Text="Logout" StyleClass="MenuItemLayoutStyle" Clicked="OnMenuItemClicked">
    </MenuItem>

    <!--
        TabBar lets you define content that won't show up in a flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where 
        you don't want users to be able to navigate away from. If you would like to navigate to this 
        content you can do so by calling 
        await Shell.Current.GoToAsync("//LoginPage");
    -->
    <TabBar>
        <ShellContent Route="LoginPage" ContentTemplate="{DataTemplate local:LoginPage}" />
    </TabBar>

    <!-- Optional Templates 
    // These may be provided inline as below or as separate classes.

    // This header appears at the top of the Flyout.
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    // ItemTemplate is for ShellItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Text, Icon
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>

    -->

</Shell>
